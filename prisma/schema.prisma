

// Prisma client generator configuration
generator client {
  provider = "prisma-client-js" // Generates TypeScript client for database operations
}

// Database connection configuration
datasource db {
  provider = "postgresql" // Using PostgreSQL database
  url      = env("DATABASE_URL") // Main connection URL from environment
  directUrl = env("DIRECT_URL") // Direct connection URL for migrations
}

// User model - represents registered users in the system
model User {
  id        String   @id @default(cuid()) // Unique CUID identifier
  name      String? // Optional display name
  email     String   @unique // Unique email address for authentication
  password  String // Hashed password for security
  posts     Post[] // One-to-many relationship with posts
  comments  Comment[] // One-to-many relationship with comments
}

// Post model - represents user posts in the feed
model Post {
  id        String    @id @default(cuid()) // Unique CUID identifier
  content   String // Text content of the post
  author    User      @relation(fields: [authorId], references: [id]) // Foreign key to User
  authorId  String // Author user ID
  createdAt DateTime  @default(now()) // Auto-generated timestamp
  comments  Comment[] // One-to-many relationship with comments
}

// Comment model - represents comments on posts (supports nested replies)
model Comment {
  id         String    @id @default(cuid()) // Unique CUID identifier
  content    String // Text content of the comment
  author     User      @relation(fields: [authorId], references: [id]) // Foreign key to User
  authorId   String // Comment author user ID
  post       Post      @relation(fields: [postId], references: [id]) // Foreign key to Post
  postId     String // Post this comment belongs to
  parentId   String?   // Parent comment ID (null for top-level comments)
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id]) // Self-referencing for replies
  replies    Comment[] @relation("CommentReplies") // Nested replies
  createdAt  DateTime  @default(now()) 
}
